<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DapperQueryBuilder</name>
    </assembly>
    <members>
        <member name="T:DapperQueryBuilder.CommandBuilder">
            <summary>
            CommandBuilder wraps an underlying SQL statement and the associated parameters. <br />
            Allows to easily add new clauses to underlying statement and also add new parameters.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.CommandBuilder.Connection">
            <inheritdoc/>
        </member>
        <member name="F:DapperQueryBuilder.CommandBuilder._lineBreaksRegex">
            <summary>
            Identify all types of line-breaks
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.#ctor(System.Data.IDbConnection)">
            <summary>
            New CommandBuilder. 
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.#ctor(System.Data.IDbConnection,System.FormattableString)">
            <summary>
            New CommandBuilder based on an initial command. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
            <param name="cnn"></param>
            <param name="command">SQL command</param>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.AddParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Adds single parameter to current Command Builder. <br />
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.AddObjectProperties(System.Object)">
            <summary>
            Adds all public properties of an object (like a POCO) as parameters of the current Command Builder. <br />
            This is like Dapper templates: useful when you're passing an object with multiple properties and you'll reference those properties in the SQL statement. <br />
            This method does not check for name clashes against previously added parameters. <br />
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.Append(System.FormattableString)">
            <summary>
            Appends a statement to the current command. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
            <param name="statement">SQL command</param>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.Replace(System.String,System.FormattableString)">
            <summary>
            Replaces a text by a replacement text<br />
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.AdjustMultilineString(System.String)">
            <summary>
            Given a text block (multiple lines), this removes the left padding of the block, by calculating the minimum number of spaces which happens in EVERY line.
            Then, other methods writes the lines one by one, which in case will respect the current indent of the writer.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.CommandBuilder.AppendLine(System.FormattableString)">
            <summary>
            Appends a statement to the current command, but before statement adds a linebreak. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
            <param name="statement">SQL command</param>
        </member>
        <member name="P:DapperQueryBuilder.CommandBuilder.Sql">
            <summary>
            SQL of Command
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.CommandBuilder.Parameters">
            <summary>
            Parameters of Command
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.DapperQueryBuilderOptions">
            <summary>
            Global options for DapperQueryBuilder
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.DapperQueryBuilderOptions.AutoGeneratedParameterPrefix">
            <summary>
            By default your interpolated strings will generate parameters in the SQL statement like @p0, @p1, etc. <br />
            If your database does not accept @ you can change for anything else. <br />
            Example: if you set as ":parm" you'll get :parm1, :parm2, etc. <br />
            This one defines what goes into the query.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.DapperQueryBuilderOptions.AutoGeneratedParameterObjectPrefix">
            <summary>
            By default your interpolated strings will generate parameter objects which are passed as p0, p1, etc. <br />
            If you need to change it (to match AutoGeneratedParameterPrefix) you can change for anything else. <br />
            Example: if you set as "parm" you'll get parm1, parm2, etc. <br />
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.DapperQueryBuilderOptions.ReuseIdenticalParameters">
            <summary>
            If enabled (default is disabled) each added parameter will check if identical parameter (same type and value)
            was already added, and if so will reuse the existing parameter.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.Filter">
            <summary>
            Filter statement defined in a single statement <br />
            It can include multiple conditions (if defined in a single statement during constructor), <br />
            but usually this is used as one condition (one column, one comparison operator, and one parameter).
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.Filter.Sql">
            <summary>
            Formatted SQL statement using parameters (@p0, @p1, etc)
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.Filter.Parameters">
            <summary>
            Dictionary of Dapper parameters
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.Filter.#ctor(System.FormattableString)">
            <summary>
            New Filter statement. <br />
            Example: $"[CategoryId] = {categoryId}" <br />
            Example: $"[Name] LIKE {productName}"
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.Filter.WriteFilter(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:DapperQueryBuilder.Filter.MergeParameters(DapperQueryBuilder.ParameterInfos)">
            <inheritdoc/>
        </member>
        <member name="T:DapperQueryBuilder.Filters">
            <summary>
            Multiple Filter statements which are grouped together. Can be grouped with ANDs or ORs.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.Filters.Type">
            <summary>
            By default Filter Groups are combined with AND operator. But you can use OR.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.Filters.FiltersType">
            <summary>
            How a list of Filters are combined (AND operator or OR operator)
            </summary>
        </member>
        <member name="F:DapperQueryBuilder.Filters.FiltersType.AND">
            <summary>
            AND
            </summary>
        </member>
        <member name="F:DapperQueryBuilder.Filters.FiltersType.OR">
            <summary>
            OR
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.Filters.#ctor(DapperQueryBuilder.Filters.FiltersType,System.FormattableString[])">
            <summary>
            Create a new group of filters.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.Filters.#ctor(System.FormattableString[])">
            <summary>
            Create a new group of filters which are combined with AND operator.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.Filters.WriteFilter(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:DapperQueryBuilder.Filters.MergeParameters(DapperQueryBuilder.ParameterInfos)">
            <inheritdoc/>
        </member>
        <member name="M:DapperQueryBuilder.Filters.BuildFilters(Dapper.DynamicParameters)">
            <summary>
            If you're using Filters in standalone structure (without QueryBuilder), <br />
            you can just "build" the filters over a ParameterInfos and get the string for the filters (with leading WHERE)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:DapperQueryBuilder.FluentQueryBuilder">
            <summary>
            FluentQueryBuilder allows to build queries using a Fluent-API interface
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.#ctor(System.Data.IDbConnection)">
            <summary>
            New empty FluentQueryBuilder. <br />
            Should be constructed using .Select(), .From(), .Where(), etc.
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Select(System.FormattableString)">
            <summary>
            Adds one column to the select clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Select(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.SelectDistinct(System.FormattableString)">
            <summary>
            Adds one column to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.SelectDistinct(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.From(System.FormattableString)">
            <summary>
            Adds a new table to from clauses. <br />
            "FROM" word is optional. <br />
            You can add an alias after table name. <br />
            You can also add INNER JOIN, LEFT JOIN, etc (with the matching conditions).
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.OrderBy(System.FormattableString)">
            <summary>
            Adds a new column to orderby clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.GroupBy(System.FormattableString)">
            <summary>
            Adds a new column to groupby clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Having(System.FormattableString)">
            <summary>
            Adds a new condition to having clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Limit(System.Int32,System.Int32)">
            <summary>
            Adds offset and rowcount clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Where(DapperQueryBuilder.Filter)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Where(DapperQueryBuilder.Filters)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.FluentQueryBuilder.Where(System.FormattableString)">
            <summary>
            Adds a new condition to where clauses. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.FluentQueryBuilder.Sql">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.FluentQueryBuilder.Parameters">
            <summary>
            Parameters of Query
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.FluentQueryBuilder.Connection">
            <summary>
            Underlying connection
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IEmptyQueryBuilder">
            <summary>
            Empty QueryBuilder (initialized without a template), which can start both with Select() or SelectDistinct()
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IEmptyQueryBuilder.Select(System.FormattableString)">
            <summary>
            Adds one column to the select clauses
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DapperQueryBuilder.IEmptyQueryBuilder.Select(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IEmptyQueryBuilder.SelectDistinct(System.FormattableString)">
            <summary>
            Adds one column to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IEmptyQueryBuilder.SelectDistinct(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IFromBuilder">
            <summary>
            Query Builder with one or more from clauses, which can still add more clauses to from
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFromBuilder.From(System.FormattableString)">
            <summary>
            Adds a new table to from clauses. <br />
            "FROM" word is optional. <br />
            You can add an alias after table name. <br />
            You can also add INNER JOIN, LEFT JOIN, etc (with the matching conditions).
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFromBuilder.Where(DapperQueryBuilder.Filter)">
            <summary>
            Adds a new group of conditions to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFromBuilder.Where(DapperQueryBuilder.Filters)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFromBuilder.Where(System.FormattableString)">
            <summary>
            Adds a new condition to where clauses. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFromBuilder.OrderBy(System.FormattableString)">
            <summary>
            Adds a new column to orderby clauses.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IGroupByBuilder">
            <summary>
            Query Builder with one or more groupby clauses, which can still add more clauses to groupby
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IGroupByHavingBuilder">
            <summary>
            Query Builder with one or more having clauses, which can still add more clauses to having
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IGroupByHavingBuilder.Having(System.FormattableString)">
            <summary>
            Adds a new condition to having clauses.
            </summary>
            <param name="having"></param>
            <returns></returns>
        </member>
        <member name="M:DapperQueryBuilder.IGroupByHavingBuilder.OrderBy(System.FormattableString)">
            <summary>
            Adds a new condition to orderby clauses.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IOrderByBuilder">
            <summary>
            Query Builder with one or more orderby clauses, which can still add more clauses to orderby
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IOrderByBuilder.OrderBy(System.FormattableString)">
            <summary>
            Adds a new condition to orderby clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IOrderByBuilder.Limit(System.Int32,System.Int32)">
            <summary>
            Adds offset and rowcount clauses
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ISelectBuilder">
            <summary>
            Query Builder which is preparing a SELECT statement
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectBuilder.Select(System.FormattableString)">
            <summary>
            Adds one column to the select clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectBuilder.Select(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectBuilder.From(System.FormattableString)">
            <summary>
            Adds a new table to from clauses. <br />
            "FROM" word is optional. <br />
            You can add an alias after table name. <br />
            You can also add INNER JOIN, LEFT JOIN, etc (with the matching conditions).
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ISelectDistinctBuilder">
            <summary>
            QueryBuilder which is preparing a SELECT DISTINCT statement
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectDistinctBuilder.SelectDistinct(System.FormattableString)">
            <summary>
            Adds one column to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectDistinctBuilder.SelectDistinct(System.FormattableString[])">
            <summary>
            Adds one or more columns to the select clauses, and defines that query is a SELECT DISTINCT type
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ISelectDistinctBuilder.From(System.FormattableString)">
            <summary>
            Adds a new table to from clauses. <br />
            "FROM" word is optional. <br />
            You can add an alias after table name. <br />
            You can also add INNER JOIN, LEFT JOIN, etc (with the matching conditions).
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IWhereBuilder">
            <summary>
            Query Builder with one or more clause in where, which can still add more clauses to where
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IWhereBuilder.Where(DapperQueryBuilder.Filter)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IWhereBuilder.Where(DapperQueryBuilder.Filters)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IWhereBuilder.Where(System.FormattableString)">
            <summary>
            Adds a new condition to where clauses. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IWhereBuilder.GroupBy(System.FormattableString)">
            <summary>
            Adds a new condition to groupby clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IWhereBuilder.OrderBy(System.FormattableString)">
            <summary>
            Adds a new condition to orderby clauses.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ICommand">
            <summary>
            Any command (Contains Connection, SQL, and Parameters)
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ICommand.Sql">
            <summary>
            SQL of Command
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ICommand.Parameters">
            <summary>
            Parameters of Command
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ICommand.Connection">
            <summary>
            Underlying connection
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ICompleteCommand">
            <summary>
            Any command (Contains Connection, SQL, and Parameters) which is complete for execution.
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ICompleteCommandExtensions">
            <summary>
            ICompleteCommands are "ready to run" - this is where we extend those commands with Dapper facades
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.Execute(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the number of rows affected.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the number of rows affected.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteScalar(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the first cell returned, as object.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteScalarAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the first cell returned, as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteScalarAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the first cell returned, as object.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryMultiple(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning multiple result sets, and access each in turn.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryMultipleAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning multiple result sets, and access each in turn.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.Query``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirst``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefault``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingle``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefault``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.Query(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirst(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefault(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingle(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefault(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.Query(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirst(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefault(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingle(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefault(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefaultAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefaultAsync``1(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as T.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefaultAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefaultAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as dynamic objects.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryAsync(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstAsync(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QueryFirstOrDefaultAsync(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleAsync(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.QuerySingleOrDefaultAsync(DapperQueryBuilder.ICompleteCommand,System.Type,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning the data typed as type.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteReader(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning an System.Data.IDataReader
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ICompleteCommandExtensions.ExecuteReaderAsync(DapperQueryBuilder.ICompleteCommand,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes the query (using Dapper), returning an System.Data.IDataReader
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IDbConnectionExtensions">
            <summary>
            Extends IDbConnection to easily build QueryBuilder or FluentQueryBuilder
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IDbConnectionExtensions.FluentQueryBuilder(System.Data.IDbConnection)">
            <summary>
            Creates a new empty FluentQueryBuilder over current connection
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:DapperQueryBuilder.IDbConnectionExtensions.QueryBuilder(System.Data.IDbConnection,System.FormattableString)">
            <summary>
            Creates a new QueryBuilder over current connection
            </summary>
            <param name="cnn"></param>
            <param name="query">You can use "{where}" or "/**where**/" in your query, and it will be replaced by "WHERE + filters" (if any filter is defined). <br />
            You can use "{filters}" or "/**filters**/" in your query, and it will be replaced by "filters" (without where) (if any filter is defined).
            </param>
        </member>
        <member name="M:DapperQueryBuilder.IDbConnectionExtensions.QueryBuilder(System.Data.IDbConnection)">
            <summary>
            Creates a new empty QueryBuilder over current connection
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:DapperQueryBuilder.IDbConnectionExtensions.CommandBuilder(System.Data.IDbConnection,System.FormattableString)">
            <summary>
            Creates a new CommandBuilder over current connection
            </summary>
            <param name="cnn"></param>
            <param name="command">SQL command</param>
        </member>
        <member name="M:DapperQueryBuilder.IDbConnectionExtensions.CommandBuilder(System.Data.IDbConnection)">
            <summary>
            Creates a new empty CommandBuilder over current connection
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.IFilter">
            <summary>
            Can be both individual filter or a list of filters.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFilter.WriteFilter(System.Text.StringBuilder)">
            <summary>
            Writes the SQL Statement of the filter
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.IFilter.MergeParameters(DapperQueryBuilder.ParameterInfos)">
            <summary>
            Merges parameters from this filter into a CommandBuilder. <br />
            Checks for name clashes, and will rename parameters (in CommandBuilder) if necessary. <br />
            If some parameter is renamed the underlying Sql statement will have the new parameter names replaced by their new names.<br />
            This method does NOT append Parser SQL to CommandBuilder SQL (you may want to save this SQL statement elsewhere)
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.InterpolatedStatementParser">
            <summary>
            Parses an interpolated-string SQL statement into a injection-safe statement (with parameters as @p0, @p1, etc) and a dictionary of parameter values.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.InterpolatedStatementParser.Sql">
            <summary>
            Injection-safe statement, with parameters as @p0, @p1, etc.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.InterpolatedStatementParser.Parameters">
            <summary>
            Dictionary of Dapper parameters
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.InterpolatedStatementParser.AutoGeneratedParameterPrefix">
            <summary>
            By default your interpolated strings will generate parameters in the SQL statement like @p0, @p1, etc. <br />
            If your database does not accept @ you can change for anything else. <br />
            Example: if you set as ":parm" you'll get :parm1, :parm2, etc. <br />
            This one defines what goes into the query.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.InterpolatedStatementParser.AutoGeneratedParameterObjectPrefix">
            <summary>
            By default your interpolated strings will generate parameter objects which are passed as p0, p1, etc. <br />
            If you need to change it (to match AutoGeneratedParameterPrefix) you can change for anything else. <br />
            Example: if you set as "parm" you'll get parm1, parm2, etc. <br />
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.InterpolatedStatementParser.#ctor(System.FormattableString)">
            <summary>
            Parses an interpolated-string SQL statement into a injection-safe statement (with parameters as @p0, @p1, etc) and a dictionary of parameter values.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:DapperQueryBuilder.InterpolatedStatementParser.MergeParameters(DapperQueryBuilder.ParameterInfos)">
            <summary>
            Merges parameters from this query/statement into a CommandBuilder. <br />
            Checks for name clashes, and will rename parameters (in CommandBuilder) if necessary. <br />
            If some parameter is renamed the underlying Sql statement will have the new parameter names replaced by their new names.<br />
            This method does NOT append Parser SQL to CommandBuilder SQL (you may want to save this SQL statement elsewhere)
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ParameterInfo">
            <summary>
            SQL parameter which is passed to Dapper
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.Name">
            <summary>
            Name of parameter. 
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.Value">
            <summary>
            Value of parameter
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.ParameterDirection">
            <summary>
            Parameters added through string interpolation are usually input parameters (passed from C# to SQL), <br />
            but you may explicitly describe parameters as Output, InputOutput, or ReturnValues.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.DbType">
            <summary>
            Parameters added through string interpolation usually do not need to define their DbType, and Dapper will automatically detect the correct type, <br />
            but it's possible to explicitly define the DbType (which Dapper will map to corresponding type in your database)
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.Size">
            <summary>
            Parameters added through string interpolation usually do not need to define their Size, and Dapper will automatically detect the correct size, <br />
            but it's possible to explicitly define the size (usually for strings, where in some specific scenarios you can get better performance by passing the exact data type)
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.Precision">
            <summary>
            Parameters added through string interpolation usually do not need to define this, as Dapper will automatically calculate the correct value
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfo.Scale">
            <summary>
            Parameters added through string interpolation usually do not need to define this, as Dapper will automatically calculate the correct value
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfo.#ctor(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            New Parameter
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="direction">The in or out direction of the parameter.</param>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfo.#ctor(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            New Parameter
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="direction">The in or out direction of the parameter.</param>
            <param name="size">The size of the parameter.</param>
            <param name="precision">The precision of the parameter.</param>
            <param name="scale">The scale of the parameter.</param>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfo.CreateOutputParameter``2(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},DapperQueryBuilder.ParameterInfo.OutputParameterDirection,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Creates a new Output Parameter (can be Output, InputOutput, or ReturnValue) <br />
            and registers a callback action which (after command invocation) will populate back parameter output value into an instance property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="target">Target variable where output value will be set.</param>
            <param name="expression">Property where output value will be set. If it's InputOutput type this value will be passed.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="direction">The type of output of the parameter.</param>
            <param name="size">The size of the parameter.</param>
            <param name="precision">The precision of the parameter.</param>
            <param name="scale">The scale of the parameter.</param>
        </member>
        <member name="T:DapperQueryBuilder.ParameterInfo.OutputParameterDirection">
            <summary>
            Type of Output
            </summary>
        </member>
        <member name="F:DapperQueryBuilder.ParameterInfo.OutputParameterDirection.Output">
            <summary>
            The parameter is an output parameter.
            </summary>
        </member>
        <member name="F:DapperQueryBuilder.ParameterInfo.OutputParameterDirection.InputOutput">
            <summary>
            The parameter is capable of both input and output.
            </summary>
        </member>
        <member name="F:DapperQueryBuilder.ParameterInfo.OutputParameterDirection.ReturnValue">
            <summary>
            The parameter represents a return value from an operation such as a stored procedure, built-in function, or user-defined function.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfo.GetSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Convert a lambda expression for a getter into a setter
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.ParameterInfos">
            <summary>
            A List of Parameters that are passed to Dapper methods
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.#ctor">
            <summary>
            List of SQL parameters which are passed to Dapper
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfos.DapperParameters">
            <summary>
            Convert the current parameters into Dapper Parameters, since Dapper will automagically set DbTypes, Sizes, etc, and map to our databases
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.Add(DapperQueryBuilder.ParameterInfo)">
            <summary>
            Add a parameter to this dynamic parameter list.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.Add(System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection})">
            <summary>
            Add a parameter to this dynamic parameter list (reusing existing parameter if possible)
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.Get``1(System.String)">
            <summary>
            Get parameter value
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.ParameterInfos.ParameterNames">
            <summary>
            Parameter Names
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.Dapper#SqlMapper#IParameterCallbacks#OnCompleted">
            <summary>
            After Dapper command is executed, we should get output/return parameters back
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.MergeParameter(DapperQueryBuilder.ParameterInfo)">
            <summary>
            Merges single parameter into this list. <br />
            Checks for name clashes, and will rename parameter if necessary. <br />
            If parameter is renamed the new name will be returned, else returns null.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.ParameterInfos.MergeParameters(DapperQueryBuilder.ParameterInfos,System.String)">
            <summary>
            Merges multiple parameters into this list. <br />
            Checks for name clashes, and will rename parameters if necessary. <br />
            If some parameter is renamed the returned Sql statement will containg the original sql replaced with new names, else (if nothing changed) returns null. <br />
            </summary>
        </member>
        <member name="T:DapperQueryBuilder.QueryBuilder">
            <summary>
            Query Builder wraps an underlying SQL statement and the associated parameters. <br />
            Allows to easily add new clauses to underlying statement and also add new parameters. <br />
            On top of that it also loads a "Filters" property which can track a list of filters <br />
            which are later combined (by default with AND) and will replace the keyword /**where**/
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.QueryBuilder.FiltersType">
            <summary>
            How a list of Filters are combined (AND operator or OR operator)
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.#ctor(System.Data.IDbConnection)">
            <summary>
            New empty QueryBuilder. <br />
            Query should be built using .Append(), .AppendLine(), or .Where(). <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            Where filters will later replace /**where**/ keyword
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.#ctor(System.Data.IDbConnection,System.FormattableString)">
            <summary>
            New QueryBuilder based on an initial query. <br />
            Query can be modified using .Append(), .AppendLine(), .Where(). <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            Where filters will later replace /**where**/ keyword
            </summary>
            <param name="cnn"></param>
            <param name="query">You can use "{where}" or "/**where**/" in your query, and it will be replaced by "WHERE + filters" (if any filter is defined). <br />
            You can use "{filters}" or "/**filters**/" in your query, and it will be replaced by "AND filters" (without where) (if any filter is defined).
            </param>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.Where(DapperQueryBuilder.Filter)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.Where(DapperQueryBuilder.Filters)">
            <summary>
            Adds a new condition to where clauses.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.Where(System.FormattableString)">
            <summary>
            Adds a new condition to where clauses. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.GetFilters">
            <summary>
            Writes the SQL Statement of all filter(s) (going recursively if there are nested filters) <br />
            Does NOT add leading "WHERE" keyword. <br />
            Returns null if no filter was defined.
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.QueryBuilder.Sql">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.QueryBuilder.Parameters">
            <summary>
            Parameters of Query
            </summary>
        </member>
        <member name="P:DapperQueryBuilder.QueryBuilder.Connection">
            <summary>
            Underlying connection
            </summary>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.Append(System.FormattableString)">
            <summary>
            Appends a statement to the current command. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
            <param name="statement">SQL command</param>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.AppendLine(System.FormattableString)">
            <summary>
            Appends a statement to the current command, but before statement adds a linebreak. <br />
            Parameters embedded using string-interpolation will be automatically converted into Dapper parameters.
            </summary>
            <param name="statement">SQL command</param>
        </member>
        <member name="M:DapperQueryBuilder.QueryBuilder.From(System.FormattableString)">
            <summary>
            Adds a new join to the FROM clause.
            </summary>
        </member>
    </members>
</doc>
